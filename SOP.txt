STANDARD OPERATING PROCEDURE (SOP) - CONSULTATION APP
================================================================

DOCUMENT VERSION: 2.0
LAST UPDATED: January 2025
MAINTAINED BY: APH Development Team
REVIEW CYCLE: Quarterly

================================================================

1. PROJECT OVERVIEW
===================

The Consultation App is a comprehensive healthcare video consultation platform designed for medical professionals to conduct, record, and manage patient consultations. The application provides secure video recording, NAS storage integration, master data management, role-based access control, and advanced reporting capabilities.

MISSION STATEMENT:
To provide healthcare professionals with a secure, efficient, and user-friendly platform for conducting and managing video consultations while maintaining the highest standards of data privacy and security.

KEY FEATURES:
âœ… Video Recording: Real-time video capture during consultations
âœ… NAS Storage Integration: Secure video storage on Network Attached Storage
âœ… Patient Management: Complete patient information tracking with UHID
âœ… Report Generation: PDF and Excel export capabilities with advanced filtering
âœ… Role-based Access: Doctor and Admin user roles with location-based restrictions
âœ… Master Data Management: Doctors, ICU Consultants, and Locations CRUD operations
âœ… Location-based Security: Users restricted to their assigned location data
âœ… Docker Deployment: Containerized application with NGINX reverse proxy
âœ… Enhanced Authentication: JWT-based secure authentication with bcrypt encryption
âœ… Advanced UI: Modern React interface with animations and responsive design

2. TECHNOLOGIES USED
====================

Frontend Technologies:
- React 19.1.0: Modern JavaScript framework for UI
- React Bootstrap 2.10.9: UI component library
- Framer Motion 12.7.4: Animation library
- Axios 1.8.4: HTTP client for API communication
- React Router DOM 7.5.1: Client-side routing
- jsPDF 3.0.1: PDF generation
- XLSX 0.18.5: Excel file generation
- WebM Duration Fix 1.0.4: Video duration handling

Backend Technologies:
- Node.js 18: JavaScript runtime
- Express.js 4.18.2: Web framework
- MongoDB: NoSQL database with Mongoose ODM
- JWT: JSON Web Token authentication
- bcryptjs 2.4.3: Password hashing
- Multer 1.4.5: File upload handling
- Helmet 7.0.0: Security middleware
- Morgan 1.10.0: HTTP request logging

Infrastructure & DevOps:
- Docker: Containerization
- NGINX: Reverse proxy and static file serving
- HTTPS/SSL: Secure communication
- NAS Storage: Network Attached Storage for video files
- GitHub Container Registry (GHCR): Container image registry

3. FOLDER STRUCTURE
===================
```
consultation-app/
â”œâ”€â”€ backend/                    # Backend Node.js application
â”‚   â”œâ”€â”€ auth/                   # Authentication utilities
â”‚   â”‚   â””â”€â”€ mssqlConnect.js    # Database connection (legacy)
â”‚   â”œâ”€â”€ controllers/            # Business logic controllers
â”‚   â”‚   â”œâ”€â”€ bbpatientController.js
â”‚   â”‚   â””â”€â”€ videoController.js  # Video streaming and filtering
â”‚   â”œâ”€â”€ middleware/             # Express middleware
â”‚   â”‚   â””â”€â”€ auth.js            # JWT authentication middleware
â”‚   â”œâ”€â”€ models/                 # MongoDB schemas
â”‚   â”‚   â”œâ”€â”€ Consultation.js    # Consultation data model
â”‚   â”‚   â”œâ”€â”€ StorageSettings.js # Storage configuration
â”‚   â”‚   â””â”€â”€ User.js           # User authentication model
â”‚   â”œâ”€â”€ routes/                 # API route definitions
â”‚   â”‚   â”œâ”€â”€ auth.js           # Authentication routes
â”‚   â”‚   â”œâ”€â”€ bbpatientRoutes.js # Patient management routes
â”‚   â”‚   â”œâ”€â”€ consultations.js   # Consultation CRUD routes
â”‚   â”‚   â””â”€â”€ videoRoutes.js    # Video streaming routes
â”‚   â”œâ”€â”€ cloudinaryConfig.js    # Cloud storage configuration
â”‚   â”œâ”€â”€ server.js              # Main application entry point
â”‚   â””â”€â”€ package.json           # Backend dependencies
â”œâ”€â”€ frontend/                   # React frontend application
â”‚   â”œâ”€â”€ public/                # Static assets
â”‚   â”‚   â”œâ”€â”€ index.html        # Main HTML template
â”‚   â”‚   â””â”€â”€ manifest.json     # PWA manifest
â”‚   â”œâ”€â”€ src/                   # React source code
â”‚   â”‚   â”œâ”€â”€ context/          # React context providers
â”‚   â”‚   â”‚   â””â”€â”€ AuthContext.js # Authentication context
â”‚   â”‚   â”œâ”€â”€ pages/            # Application pages
â”‚   â”‚   â”‚   â”œâ”€â”€ AdminDashboard.js
â”‚   â”‚   â”‚   â”œâ”€â”€ DoctorLogin.js
â”‚   â”‚   â”‚   â”œâ”€â”€ DoctorRegister.js
â”‚   â”‚   â”‚   â”œâ”€â”€ Home.js       # Main consultation interface
â”‚   â”‚   â”‚   â”œâ”€â”€ Report.js     # Report generation page
â”‚   â”‚   â”‚   â””â”€â”€ StorageSettings.js
â”‚   â”‚   â”œâ”€â”€ services/         # API service layer
â”‚   â”‚   â”‚   â””â”€â”€ api.js       # Axios configuration and API calls
â”‚   â”‚   â”œâ”€â”€ App.js           # Main React component
â”‚   â”‚   â””â”€â”€ index.js         # React entry point
â”‚   â”œâ”€â”€ nginx.conf           # NGINX configuration
â”‚   â””â”€â”€ package.json         # Frontend dependencies
â”œâ”€â”€ Dockerfile               # Multi-stage Docker build
â””â”€â”€ consultation-app.tar     # Application archive
```

4. APPLICATION FEATURES & CAPABILITIES
=====================================

4.1 CORE FUNCTIONALITIES
------------------------
âœ… Video Consultation Recording
  - Real-time video capture using WebM format
  - Automatic duration tracking
  - High-quality video compression
  - Browser-based recording (no plugins required)

âœ… Secure Video Storage
  - NAS (Network Attached Storage) integration
  - Date-based folder organization (DD-MM-YYYY)
  - Unique filename generation using MongoDB ObjectId
  - Secure file access with JWT authentication

âœ… Patient Management System
  - UHID (Unique Health Identifier) based tracking
  - Complete patient demographic information
  - Consultation history maintenance
  - Department-wise patient categorization

âœ… User Authentication & Authorization
  - JWT-based secure authentication
  - Role-based access control (Doctor/Admin)
  - Password encryption using bcrypt
  - Session management and token expiration

âœ… Master Data Management
  - Doctor Master: CRUD operations for doctor information
  - ICU Consultant Master: Specialized consultant data
  - Location Master: Hospital location/branch management
  - Active/Inactive status control for all masters

âœ… Advanced Reporting System
  - Multi-format export (PDF and Excel)
  - Advanced filtering capabilities
  - Location-based data access control
  - Real-time consultation statistics

âœ… Role-based Data Security
  - Admin: Full access to all locations and features
  - Doctor: Restricted to assigned location data
  - Database-level security filtering

4.2 RECENT ENHANCEMENTS (Version 2.0)
-------------------------------------
ðŸ†• Location Management System
  - Complete CRUD operations for hospital locations
  - Dynamic location dropdown population
  - Location-based report filtering
  - Admin-only location modification rights

ðŸ†• Enhanced Master Data Features
  - Centralized master data management interface
  - Real-time dropdown updates across application
  - Alphabetical sorting for better UX
  - Bulk operations support

ðŸ†• Improved Authentication Flow
  - Dynamic location field in registration
  - Enhanced password validation
  - Graceful error handling for duplicate users
  - Automatic admin user creation

ðŸ†• Advanced Report Features
  - Location column in report tables
  - Proper text wrapping for long location names
  - Enhanced export functionality
  - Role-based data filtering at query level

ðŸ†• Security Enhancements
  - Location-based data isolation
  - Enhanced API authorization
  - Improved error handling
  - Audit trail improvements

User Roles & Permissions:
- Doctor: Create consultations, record videos, view own location reports, access master dropdowns
- Admin: Full system access, manage master data, view all location reports, user management

5. INSTALLATION & SETUP PROCEDURES
==================================

5.1 DEVELOPMENT ENVIRONMENT SETUP
---------------------------------
Prerequisites Checklist:
â–¡ Node.js 18+ installed and verified
â–¡ MongoDB 7.0+ running and accessible
â–¡ Git version control system installed
â–¡ NAS storage mounted and configured
â–¡ SSL certificates available (for HTTPS)
â–¡ Required ports available (3000, 5000, 443)

Step-by-Step Installation:

STEP 1: Repository Setup
------------------------
1. Clone the repository:
   git clone <repository-url>
   cd consultation-app

2. Verify directory structure:
   ls -la
   # Should show: backend/, frontend/, Dockerfile, README.md, SOP.txt

STEP 2: Backend Configuration
-----------------------------
1. Navigate to backend directory:
cd backend

2. Install Node.js dependencies:
npm install
   # Verify installation: npm list --depth=0

3. Create environment configuration:
cp .env.example .env
   # Edit .env file with appropriate values

4. Configure environment variables:
MONGODB_URI=mongodb://localhost:27017/consultation-app
   JWT_SECRET=your-super-secret-jwt-key-minimum-32-characters
   PORT=5000
   NODE_ENV=development
   NAS_MOUNT_PATH=/mnt/nas-biometrics
NAS_FOLDER=Video Record
   BCRYPT_SALT_ROUNDS=12

5. Verify MongoDB connection:
   # Test connection before starting application
   mongo mongodb://localhost:27017/consultation-app

6. Start development server:
npm run dev
   # Should see: "âœ… Connected to MongoDB" and "ðŸš€ Server running on port 5000"

STEP 3: Frontend Configuration
------------------------------
1. Navigate to frontend directory:
   cd ../frontend

2. Install React dependencies:
npm install
   # Verify installation: npm list --depth=0

3. Create environment configuration:
   echo "REACT_APP_API_URL=https://localhost:5000/api" > .env

4. Start development server:
npm start
   # Application should open at http://localhost:3000

STEP 4: Initial System Verification
-----------------------------------
1. Access application at http://localhost:3000
2. Login with default admin credentials:
   - Username: admin
   - Password: admin123
   - Location: APH
3. Verify all menu items are accessible
4. Test video recording functionality
5. Verify report generation works
6. Check master data management features

5.2 DEFAULT USER ACCOUNTS
-------------------------
Default Admin Account (Auto-created):
- Username: admin
- Password: admin123
- Role: Admin
- Location: APH
- Access: Full system access

First-time Setup Recommendations:
1. Change default admin password immediately
2. Create additional admin users if needed
3. Set up doctor accounts for each location
4. Configure master data (doctors, consultants, locations)
5. Test video recording and playback functionality

Production Environment Setup:

Using Docker:
```bash
# 1. Build Docker image
docker build -t consultation-app .

# 2. Run container
docker run -p 443:443 -p 5000:5000 \
  -e MONGODB_URI=your-mongodb-uri \
  -e JWT_SECRET=your-secret-key \
  -e NAS_MOUNT_PATH=/mnt/nas \
  -e NAS_FOLDER=Video Record \
  consultation-app
```

Manual Production Setup:
```bash
# 1. Build frontend
cd frontend
npm run build

# 2. Configure NGINX
sudo cp nginx.conf /etc/nginx/nginx.conf
sudo systemctl restart nginx

# 3. Start backend with PM2
cd backend
npm install -g pm2
pm2 start server.js --name consultation-app
```

6. HOW TO DEPLOY VIA DOCKER & GHCR
====================================

Building and Pushing to GHCR:

```bash
# 1. Login to GitHub Container Registry
echo $GITHUB_TOKEN | docker login ghcr.io -u USERNAME --password-stdin

# 2. Build image with GHCR tag
docker build -t ghcr.io/USERNAME/consultation-app:latest .

# 3. Push to GHCR
docker push ghcr.io/USERNAME/consultation-app:latest

# 4. Deploy from GHCR
docker pull ghcr.io/USERNAME/consultation-app:latest
docker run -d \
  --name consultation-app \
  -p 443:443 -p 5000:5000 \
  -e MONGODB_URI=your-mongodb-uri \
  -e JWT_SECRET=your-secret-key \
  -e NAS_MOUNT_PATH=/mnt/nas \
  -e NAS_FOLDER=Video Record \
  ghcr.io/USERNAME/consultation-app:latest
```

Docker Compose Deployment:
```yaml
version: '3.8'
services:
  consultation-app:
    image: ghcr.io/USERNAME/consultation-app:latest
    ports:
      - "443:443"
      - "5000:5000"
    environment:
      - MONGODB_URI=mongodb://mongo:27017/consultation-app
      - JWT_SECRET=your-secret-key
      - NAS_MOUNT_PATH=/mnt/nas
      - NAS_FOLDER=Video Record
    volumes:
      - /mnt/nas:/mnt/nas:ro
    depends_on:
      - mongo
  
  mongo:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

volumes:
  mongo_data:
```

7. HOW NAS VIDEO STORAGE INTEGRATION WORKS
===========================================

Storage Architecture:
- Primary Storage: Network Attached Storage (NAS) mounted at /mnt/nas-biometrics
- Organization: Date-based folder structure (DD-MM-YYYY format)
- File Naming: {MongoDB_ObjectId}.webm format
- Access Control: Read-only access for video streaming

Video Upload Process:
1. Recording: Frontend captures video using MediaRecorder API
2. Upload: Video blob sent to /api/save-video endpoint
3. Processing: Backend receives video and generates filename using MongoDB ObjectId
4. Storage: Video saved to NAS with date-based folder structure
5. Database: Consultation record updated with video metadata

Video Streaming Process:
1. Request: Frontend requests video via /api/videos/{date}/{filename}
2. Validation: Backend checks file existence on NAS
3. Streaming: Video streamed with range request support for efficient playback
4. Security: JWT authentication required for video access

File Structure Example:
```
/mnt/nas-biometrics/
â”œâ”€â”€ 25-07-2025/
â”‚   â”œâ”€â”€ 507f1f77bcf86cd799439011.webm
â”‚   â”œâ”€â”€ 507f1f77bcf86cd799439012.webm
â”‚   â””â”€â”€ 507f1f77bcf86cd799439013.webm
â”œâ”€â”€ 26-07-2025/
â”‚   â”œâ”€â”€ 507f1f77bcf86cd799439014.webm
â”‚   â””â”€â”€ 507f1f77bcf86cd799439015.webm
```

8. DATABASE MODELS & STRUCTURE
===============================

8.1 USER MODEL (User.js)
------------------------
Enhanced user model with location support:
```javascript
{
  name: String,              // User's full name
  doctorId: String,          // Unique doctor identifier (unique index)
  password: String,          // bcrypt hashed password
  role: String,              // 'doctor' or 'admin' (enum)
  location: String,          // Assigned hospital location (required)
  createdAt: Date,           // Account creation timestamp
  updatedAt: Date            // Last update timestamp
}
```

Security Features:
- Password hashing with bcrypt (12 salt rounds)
- Pre-save middleware for password encryption
- comparePassword method for authentication
- Automatic admin user creation on startup

8.2 CONSULTATION MODEL (Consultation.js)
----------------------------------------
Complete consultation tracking with location support:
```javascript
{
  patientName: String,        // Patient's full name (required)
  uhidId: String,            // Unique Health Identifier (required)
  department: String,         // Medical department (required)
  doctor: ObjectId,          // Reference to User model
  doctorName: String,        // Doctor's name (denormalized)
  attenderName: String,      // Attending person's name
  icuConsultantName: String, // ICU consultant name
  conditionType: String,     // 'normal', 'CriticalCare', 'MLC' (enum)
  location: String,          // Consultation location (NEW)
  videoFileName: String,     // Associated video filename
  date: Date,               // Consultation date/time
  recordingDuration: Number, // Video duration in seconds
  status: String,           // 'completed', 'pending', 'cancelled'
  notes: String,            // Additional consultation notes
  createdAt: Date,          // Record creation timestamp
  updatedAt: Date           // Last update timestamp
}
```

8.3 MASTER DATA MODELS
----------------------
Doctor Model (Doctor.js):
```javascript
{
  name: String,              // Doctor's name (unique)
  createdAt: Date,           // Creation timestamp
  updatedAt: Date            // Last update timestamp
}
```

ICU Consultant Model (IcuConsultant.js):
```javascript
{
  name: String,              // Consultant's name (unique)
  createdAt: Date,           // Creation timestamp
  updatedAt: Date            // Last update timestamp
}
```

Location Model (Location.js) - NEW:
```javascript
{
  name: String,              // Location name (unique)
  status: String,            // 'active' or 'inactive' (enum)
  createdAt: Date,           // Creation timestamp
  updatedAt: Date            // Last update timestamp
}
```

Storage Settings Model (StorageSettings.js):
```javascript
{
  path: String,              // Storage path configuration
  maxSize: Number,           // Maximum size in MB
  allowedTypes: Array,       // Allowed file types
  lastUpdated: Date          // Last configuration update
}
```

8.4 DATABASE INDEXES & PERFORMANCE
----------------------------------
Critical Indexes:
- users.doctorId: Unique index for login performance
- consultations.uhidId: Index for patient lookup
- consultations.doctor: Index for doctor-specific queries
- consultations.date: Index for date-based filtering and sorting
- consultations.location: Index for location-based filtering
- doctors.name: Unique index for dropdown population
- icuconsultants.name: Unique index for dropdown population
- locations.name: Unique index for location management

Query Optimization:
- Location-based filtering at database level
- Efficient pagination with sorted results
- Compound indexes for complex filter combinations

Indexes for Performance:
- uhidId: For patient lookup
- doctor: For doctor-specific queries
- date: For date-based filtering and sorting

9. EXPLANATION OF API ROUTES AND CONTROLLERS
=============================================

Authentication Routes (/api/auth):
- POST /login: User authentication with JWT token generation
- POST /register: New user registration
- POST /logout: User logout (token invalidation)

Consultation Routes (/api/consultations):
- POST /: Create new consultation
- GET /: Get all consultations with filtering
- GET /doctor: Get doctor-specific consultations
- GET /uhid/:uhidId: Get consultation by UHID
- PUT /:id: Update consultation details
- DELETE /:id: Delete consultation

Video Routes (/api/videos):
- GET /:date/:filename: Stream video from NAS
- GET /filter: Get filtered consultation metadata
- POST /save-video: Upload video to NAS

Patient Routes (/api/patient):
- GET /:uhid: Get patient information by UHID

Storage Routes (/api):
- GET /get-storage-path: Get current NAS storage configuration
- POST /update-storage-path: Update NAS storage settings

10. AUTHENTICATION & AUTHORIZATION FLOW
=======================================

Authentication Process:
1. Login Request: User submits doctorId and password
2. Validation: Backend validates credentials against database
3. Token Generation: JWT token created with user role and ID
4. Response: Token and user data returned to frontend
5. Storage: Token stored in localStorage for subsequent requests

Authorization Middleware:
- protect: Verifies JWT token and attaches user to request
- authorize: Checks user role against required permissions
- Role-based Access: Different endpoints accessible based on user role

Security Features:
- Password Hashing: bcrypt with salt rounds
- JWT Expiration: 24-hour token validity
- CORS Configuration: Cross-origin request handling
- Rate Limiting: Request throttling for API protection
- Input Validation: Express-validator for request sanitization

11. HOW VIDEO UPLOAD & STREAMING WORKS
=======================================

Video Recording Process:
1. Media Access: Frontend requests camera/microphone permissions
2. Recording Start: MediaRecorder API captures video stream
3. Chunk Collection: Video data collected in chunks
4. Blob Creation: Final video blob created with WebM format
5. Upload: Video sent to backend via FormData

Video Upload Process:
1. File Reception: Multer middleware handles multipart form data
2. Filename Generation: MongoDB ObjectId used for unique filename
3. Folder Creation: Date-based folder created on NAS if needed
4. File Storage: Video saved to NAS with proper error handling
5. Database Update: Consultation record updated with video metadata

Video Streaming Process:
1. Request Validation: Backend validates file existence on NAS
2. Range Support: HTTP range requests for efficient streaming
3. Content-Type: Proper MIME type detection (video/webm)
4. Stream Response: Video streamed with appropriate headers
5. Error Handling: 404 for missing files, 500 for server errors

Video Playback Features:
- Range Requests: Support for seeking and partial content
- Blob URLs: Frontend creates object URLs for video playback
- Memory Management: Proper cleanup of blob URLs to prevent leaks
- Error Recovery: Graceful handling of network issues

12. HOW CONSULTATION AND VIDEO FILE NAMING WORKS
================================================

Consultation Naming Convention:
- UHID: Unique Health Identifier for patient identification
- Patient Name: Full patient name for easy identification
- Date: Consultation date in ISO format
- Doctor: Associated doctor information
- Status: Consultation status (completed, pending, cancelled)

Video File Naming Convention:
- Format: {MongoDB_ObjectId}.webm
- Example: 507f1f77bcf86cd799439011.webm
- Uniqueness: MongoDB ObjectId ensures global uniqueness
- Extension: WebM format for web compatibility

Folder Organization:
- Date Format: DD-MM-YYYY (e.g., 25-07-2025)
- Path Structure: /mnt/nas-biometrics/25-07-2025/
- File Location: Videos stored in date-based folders for easy management

Database Relationships:
- Consultation ID: Links consultation record to video file
- Date Matching: Video folder date matches consultation date
- Metadata Storage: Video duration, filename stored in consultation record

13. ERROR HANDLING & LOGGING
============================

Error Handling Strategy:
- Global Error Handler: Express middleware for unhandled errors
- Validation Errors: Express-validator for input validation
- Database Errors: Mongoose error handling for database operations
- File System Errors: Try-catch blocks for NAS operations
- Network Errors: Axios interceptors for API error handling

Logging Implementation:
- Morgan: HTTP request logging middleware
- Console Logging: Structured logging for debugging
- Error Tracking: Detailed error messages with stack traces
- Performance Monitoring: Request timing and response codes

Error Categories:
- Authentication Errors: 401 Unauthorized, 403 Forbidden
- Validation Errors: 400 Bad Request with detailed messages
- Database Errors: 500 Internal Server Error for DB issues
- File System Errors: 404 Not Found for missing videos
- Network Errors: Timeout and connection error handling

14. ENVIRONMENT VARIABLE DETAILS
=================================

Required Environment Variables:

Backend (.env):
```bash
# Database Configuration
MONGODB_URI=mongodb://localhost:27017/consultation-app

# Authentication
JWT_SECRET=your-super-secret-jwt-key-here

# Server Configuration
PORT=5000
NODE_ENV=production

# NAS Storage Configuration
NAS_MOUNT_PATH=/mnt/nas-biometrics
NAS_FOLDER=Video Record

# Cloudinary Configuration (optional)
CLOUDINARY_CLOUD_NAME=your-cloud-name
CLOUDINARY_API_KEY=your-api-key
CLOUDINARY_API_SECRET=your-api-secret
```

Frontend (.env):
```bash
# API Configuration
REACT_APP_API_URL=https://your-domain.com/api

# Development Configuration
REACT_APP_DEV_MODE=true
```

Environment-Specific Configurations:

Development:
- NODE_ENV=development
- PORT=5000
- MONGODB_URI=mongodb://localhost:27017/consultation-app-dev

Production:
- NODE_ENV=production
- PORT=5000
- MONGODB_URI=mongodb://production-db:27017/consultation-app
- NAS_MOUNT_PATH=/mnt/nas-biometrics

Docker:
- Environment variables passed via Docker run or docker-compose
- SSL certificates mounted as volumes
- NAS storage mounted as read-only volume

15. BEST PRACTICES FOLLOWED IN THE PROJECT
==========================================

Security Best Practices:
- JWT Authentication: Secure token-based authentication
- Password Hashing: bcrypt with salt rounds for password security
- Input Validation: Express-validator for request sanitization
- CORS Configuration: Proper cross-origin request handling
- Rate Limiting: Request throttling to prevent abuse
- Helmet: Security headers middleware
- HTTPS: SSL/TLS encryption for all communications

Code Quality Practices:
- Modular Architecture: Separation of concerns with MVC pattern
- Error Handling: Comprehensive error handling throughout application
- Logging: Structured logging for debugging and monitoring
- Environment Configuration: Environment-specific configurations
- Input Validation: Server-side validation for all inputs
- Database Indexing: Proper MongoDB indexes for performance

Performance Best Practices:
- Video Streaming: Range request support for efficient video playback
- Database Indexing: Optimized queries with proper indexes
- Caching: Browser caching for static assets
- Compression: Gzip compression for API responses
- Pagination: Client-side pagination for large datasets

Deployment Best Practices:
- Docker Containerization: Consistent deployment across environments
- Multi-stage Builds: Optimized Docker images
- Environment Variables: Secure configuration management
- Health Checks: Application health monitoring
- Reverse Proxy: NGINX for load balancing and SSL termination

16. FUTURE IMPROVEMENT SUGGESTIONS
===================================

Technical Enhancements:
1. Real-time Features: WebSocket integration for live consultations
2. Video Compression: Server-side video compression for storage optimization
3. CDN Integration: Content Delivery Network for global video distribution
4. Microservices Architecture: Break down monolith into microservices
5. API Versioning: Implement API versioning for backward compatibility
6. Caching Layer: Redis integration for session and data caching
7. Monitoring: Application performance monitoring (APM) integration
8. Automated Testing: Comprehensive unit and integration tests

Security Enhancements:
1. Two-Factor Authentication: TOTP-based 2FA for enhanced security
2. Audit Logging: Comprehensive audit trail for compliance
3. Data Encryption: At-rest encryption for sensitive data
4. API Rate Limiting: Per-user rate limiting
5. Security Headers: Enhanced security headers configuration

User Experience Improvements:
1. Mobile App: React Native application for mobile access
2. Offline Support: Service worker for offline functionality
3. Video Quality Settings: Adjustable video quality options
4. Bulk Operations: Batch processing for multiple consultations
5. Advanced Search: Full-text search with filters
6. Dashboard Analytics: Real-time analytics and reporting
7. Notification System: Email and push notifications
8. Multi-language Support: Internationalization (i18n)

Infrastructure Improvements:
1. Kubernetes Deployment: Container orchestration for scalability
2. Auto-scaling: Horizontal pod autoscaling
3. Load Balancing: Multiple backend instances
4. Database Clustering: MongoDB replica set for high availability
5. Backup Strategy: Automated backup and recovery procedures
6. Disaster Recovery: Multi-region deployment strategy
7. CI/CD Pipeline: Automated testing and deployment
8. Infrastructure as Code: Terraform or CloudFormation templates.


===========================================

RECENT UPDATES IN VERSION 2.0:
âœ… Added comprehensive Location Management System
âœ… Enhanced Master Data Management (Doctors, ICU Consultants, Locations)
âœ… Implemented location-based data security and filtering
âœ… Added dynamic location dropdown in registration
âœ… Enhanced report filtering with location column
âœ… Improved export functionality (PDF/Excel)
âœ… Fixed text wrapping in report tables
âœ… Enhanced authentication and error handling
âœ… Added role-based API access control
âœ… Updated database models with location support

CURRENT SYSTEM STATUS:
- Fully functional video consultation platform
- Complete master data management
- Role-based access control implemented
- Location-based security active
- NAS storage integration working
- PDF/Excel export functionality
- Responsive UI with modern animations
- Comprehensive API documentation

===========================================

Document Version: 2.0

Last Updated: January 2025

Maintained By: APH Development Team

Review Cycle: Quarterly

Next Review Due: April 2025

===========================================